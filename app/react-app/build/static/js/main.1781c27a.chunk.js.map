{"version":3,"sources":["utils/services-healthcheck.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["request","require","services","name","endpoint","maxRetries","servicesHealthcheck","a","Promise","allSettled","map","service","resolve","reject","triesCount","check","setInterval","error","response","body","console","log","statusCode","running","clearInterval","checks","healthy","Object","values","every","c","status","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qfAAMA,EAAUC,EAAQ,KAElBC,EAAW,CACb,CACIC,KAAM,eACNC,SAAU,wBACVC,WAAY,KA+BLC,EA3BU,uCAAG,8BAAAC,EAAA,sEACHC,QAAQC,WACzBP,EAASQ,KAAI,SAAAC,GACT,IAAQR,EAA+BQ,EAA/BR,KAAMC,EAAyBO,EAAzBP,SAAUC,EAAeM,EAAfN,WACxB,OAAO,IAAIG,SAAQ,SAACI,EAASC,GACzB,IAAIC,EAAa,EACXC,EAAQC,aAAY,WACtBhB,EAAQI,GAAU,SAACa,EAAOC,EAAUC,GAChCC,QAAQC,IAAIH,GACPD,GAAiC,MAAxBC,EAASI,aACnBF,QAAQC,IAAIH,EAASC,MACrBP,EAAQ,eAAGT,EAAO,CAAEC,WAAUmB,SAAS,KACvCC,cAAcT,IAEdD,IAAeT,GACfQ,EAAO,eAAGV,EAAO,CAAEC,WAAUmB,SAAS,KAE1CT,SAEL,YAnBS,cAClBW,EADkB,OAuBlBC,EAAUC,OAAOC,OAAOH,GAAQI,OAAM,SAAAC,GAAC,MAAiB,cAAbA,EAAEC,UAvB3B,kBAwBjBL,GAxBiB,2CAAH,qD,4CCVV,MAA0B,iC,iBCwB1BM,MArBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdnC,IAEA2C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.1781c27a.chunk.js","sourcesContent":["const request = require('request');\n\nconst services = [\n    {\n        name: 'data-service',\n        endpoint: 'http://127.0.0.1:2999',\n        maxRetries: 10\n    }\n    // add other services here to perform healthchecks\n];\nconst servicesHealthcheck = async () => {\n    const checks = await Promise.allSettled(\n        services.map(service => {\n            const { name, endpoint, maxRetries } = service;\n            return new Promise((resolve, reject) => {\n                let triesCount = 1;\n                const check = setInterval(() => {\n                    request(endpoint, (error, response, body) => {\n                        console.log(response);\n                        if (!error && response.statusCode === 200) {\n                            console.log(response.body);\n                            resolve({ [name]: { endpoint, running: true } });\n                            clearInterval(check);\n                        }\n                        if (triesCount === maxRetries) {\n                            reject({ [name]: { endpoint, running: false } });\n                        }\n                        triesCount++;\n                    });\n                }, 1000);\n            });\n        })\n    );\n    const healthy = Object.values(checks).every(c => c.status === 'fulfilled');\n    return healthy;\n};\n\nexport default servicesHealthcheck;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { servicesHealthcheck } from './utils';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nservicesHealthcheck();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}